from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage

from config import bot_token, QIWI_ACCOUNT
from states import Token, Pay, Mailing, GiveAccess, OnePay
from keyboards import main_keyboard, cancel_keyboard, notpayed_keyboard, pay_keyboard, admin_keyboard, \
    choice_pay_keyboard
from utils import admin_cheak, write_id, set_subending_time, validate_subscription, add_tokens, ThreadWithReturnValue, \
    get_balances, send_balances, get_subending_time, read_ids, send_message
from qiwi import send_balance
from paynament import cheak_payment

bot = Bot(token=bot_token)
dp = Dispatcher(bot, storage=MemoryStorage())


@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç,—á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø",
                         reply_markup=notpayed_keyboard if not admin_cheak(message.chat.id) else admin_keyboard)
    write_id(message.from_user.id, message.from_user.username)


@dp.message_handler(state="*", text_contains='–û—Ç–º–µ–Ω–∞')
async def stop_command(message: types.Message, state: FSMContext):
    await message.answer(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                         reply_markup=main_keyboard if not admin_cheak(message.chat.id) else admin_keyboard)
    await state.finish()


@dp.message_handler(text='–ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø')
async def buy_access(message: types.Message):
    await message.answer(
        f'–ü–æ–∫—É–ø–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É:\n1 –¥–µ–Ω—å - 10 —Ä—É–±–ª–µ–π\n–ù–æ–º–µ—Ä: {QIWI_ACCOUNT}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {message.chat.id}',
        reply_markup=pay_keyboard)


@dp.callback_query_handler(text='confirm_paynament')
async def process_callback_kb1btn1(callback_query: types.CallbackQuery):
    payed_time = cheak_payment(str(callback_query.from_user.id))
    if payed_time:
        set_subending_time(str(callback_query.from_user.id), payed_time)
        await bot.send_message(callback_query.from_user.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!', reply_markup=main_keyboard)
    else:
        await bot.send_message(callback_query.from_user.id, '–û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–ª–∞–¥–µ–ª—å—Ü—É')
    await bot.answer_callback_query(callback_query.id)


@dp.message_handler(text="–î–æ–±–∞–≤–∏—Ç—å –∫–æ—à–µ–ª—å–∫–∏üî∞")
async def upload_tokens(message: types.Message):
    if validate_subscription(str(message.from_user.id)):
        await message.answer("–û—Ç–ø—Ä–∞–≤—å —Ç–µ–ª–µ—Ñ–æ–Ω:token", reply_markup=cancel_keyboard)
        await Token.waiting_to_token_value.set()
    else:
        await message.answer("–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –ø–æ–¥–ø–∏—Å–∫–∞")


@dp.message_handler(state=Token.waiting_to_token_value, content_types=types.ContentTypes.TEXT)
async def listen(message: types.Message, state: FSMContext):
    tokens = message.text.split('\n')
    tokens = add_tokens(str(message.from_user.id), tokens)
    await message.answer(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(tokens)} —Ç–æ–∫–µ–Ω(–æ–≤)",
                         reply_markup=main_keyboard if not admin_cheak(message.chat.id) else admin_keyboard)
    await state.finish()


@dp.message_handler(text="–£–∑–Ω–∞—Ç—å –±–∞–ª–∞–Ω—ÅüëÅ")
async def get_balance(message: types.Message):
    if validate_subscription(str(message.from_user.id)):
        await message.answer("–ü–∞—Ä—Å—é, –∂–¥–∏")
        thread = ThreadWithReturnValue(target=get_balances, args=(str(message.from_user.id),))
        thread.start()
    else:
        await message.answer("–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –ø–æ–¥–ø–∏—Å–∫–∞")


@dp.message_handler(text="–°–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥üíµ")
async def start_send_balance(message: types.Message):
    if validate_subscription(str(message.from_user.id)):
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ", reply_markup=choice_pay_keyboard)
    else:
        await message.answer("–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –ø–æ–¥–ø–∏—Å–∫–∞")


@dp.callback_query_handler(text="all_qiwi")
async def all_qiwis_pay(callback_query: types.CallbackQuery):
    await bot.send_message(chat_id=callback_query.from_user.id, text="–ù–æ–º–µ—Ä –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:", reply_markup=cancel_keyboard)
    await Pay.waiting_to_pay_values.set()


@dp.callback_query_handler(text="one_qiwi")
async def one_qiwis_pay(callback_query: types.CallbackQuery):
    await bot.send_message(chat_id=callback_query.from_user.id, text="–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∞ (phone:token)", reply_markup=cancel_keyboard)
    await OnePay.waiting_data.set()


@dp.message_handler(state=Pay.waiting_to_pay_values, content_types=types.ContentTypes.TEXT)
async def listen(message: types.Message, state: FSMContext):
    phone = message.text
    await message.answer("–ù–∞—á–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞", reply_markup=main_keyboard)
    send_balances(str(message.from_user.id), phone)
    await state.finish()


@dp.message_handler(state=OnePay.waiting_data, content_types=types.ContentTypes.TEXT)
async def listen(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['data'] = message.text
    await message.answer("–ù–æ–º–µ—Ä –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–µ–Ω –ø–µ—Ä–µ–≤–æ–¥")
    await OnePay.waiting_phone.set()


@dp.message_handler(state=OnePay.waiting_phone, content_types=types.ContentTypes.TEXT)
async def listen(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data = data['data']
        phone = message.text
    respone = send_balance(*data.split(':'), phone)
    if respone != "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –∫–æ—à–µ–ª–µ–∫":
        await message.answer(f"–ë—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {respone}–†", reply_markup=main_keyboard)
    else:
        await message.answer(respone, reply_markup=main_keyboard)
    await state.finish()


@dp.message_handler(text="–ü–æ–¥–ø–∏—Å–∫–∞üóù")
async def check_subscribe(message: types.Message):
    await message.answer(get_subending_time(str(message.from_user.id), reform=True))


@dp.message_handler(text_endswith=['–†–∞—Å—Å—ã–ª–∫–∞', '—Ä–∞—Å—Å—ã–ª–∫–∞'])
async def mailing_command(message: types.Message):
    if admin_cheak(message.chat.id):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏", reply_markup=cancel_keyboard)
        await Mailing.waiting_text.set()


@dp.message_handler(state=Mailing.waiting_text, content_types=types.ContentTypes.TEXT)
async def mailing(message: types.Message, state: FSMContext):
    text = message.text
    users = read_ids()
    sended = 0
    for user in users:
        if send_message(user, text)[6:][:4] == 'true':
            sended += 1
    await message.answer(f"–û–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ {sended} —á–∞—Ç–∞", reply_markup=admin_keyboard)
    await state.finish()


@dp.message_handler(text='–í—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø')
async def get_give_access_data(message: types.Message):
    if admin_cheak(message.chat.id):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø.", reply_markup=cancel_keyboard)
        await GiveAccess.waiting_id.set()


@dp.message_handler(state=GiveAccess.waiting_id, content_types=types.ContentTypes.TEXT)
async def listing(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['id'] = message.text
    await message.answer("–ù–∞ —Å–∫–æ–ª—å–∫–æ –≤—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)")
    await GiveAccess.waiting_time.set()


@dp.message_handler(state=GiveAccess.waiting_time, content_types=types.ContentTypes.TEXT)
async def give_access(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        user_id = str(data['id'])
        subtime = int(message.text)
    try:
        set_subending_time(user_id, subtime)
        await bot.send_message(chat_id=user_id, text="–í–∞–º –±—ã–ª –≤—ã–¥–∞–Ω –¥–æ—Å—Ç—É–ø –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                               reply_markup=main_keyboard)
        await message.answer("–£—Å–ø–µ—à–Ω–æ", reply_markup=admin_keyboard)
    except:
        await message.answer("–û—à–∏–±–∫–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç—É –≤ –±–∞–∑–µ.", reply_markup=admin_keyboard)
    await state.finish()


@dp.message_handler(text_contains='DB')
async def info(message: types.Message):
    if admin_cheak(message.chat.id):
        await bot.send_document(message.chat.id, open('data/chat_ids.json', 'r'))
        await bot.send_document(message.chat.id, open('data/DB.json', 'r'))

if __name__ == '__main__':
    executor.start_polling(dp)
